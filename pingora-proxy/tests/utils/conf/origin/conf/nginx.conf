
#user  nobody;
worker_processes  1;

error_log  /dev/stdout;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid        /tmp/mock_origin.pid;
master_process off;
daemon off;

events {
    worker_connections  4096;
}


http {
    #include       mime.types;
    #default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  off;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  60;
    keepalive_requests 99999;

    lua_shared_dict hit_counter 10m;

    #gzip  on;

    # mTLS endpoint
    server {
        listen       8444 ssl http2;
        ssl_certificate keys/server.crt;
        ssl_certificate_key keys/key.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers TLS-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;
        ssl_client_certificate keys/root.crt;
        ssl_verify_client on;
        ssl_verify_depth 4;

        location / {
            return 200 "hello world";
        }
    }

    # secp384r1 endpoint (ECDH and ECDSA)
    server {
        listen 8445 ssl http2;
        ssl_protocols TLSv1.2;
        ssl_ciphers TLS-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA512;
        ssl_certificate keys/curve_test.384.crt;
        ssl_certificate_key keys/curve_test.384.key.pem;
        ssl_ecdh_curve secp384r1;

        location /384 {
            return 200 "Happy Friday!";
        }
    }

    # secp521r1 endpoint (ECDH and ECDSA)
    server {
        listen 8446 ssl http2;
        ssl_protocols TLSv1.2;
        ssl_ciphers TLS-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA512;
        ssl_certificate keys/curve_test.521.crt;
        ssl_certificate_key keys/curve_test.521.key.pem;
        ssl_ecdh_curve secp521r1;

        location /521 {
            return 200 "Happy Monday!";
        }
    }

    server {
        listen       8000;
        # 8001 is used for bad_lb test only to avoid unexpected connection reuse
        listen       8001;
        listen       [::]:8000;
        #listen       8443 ssl;
        listen       unix:/tmp/nginx-test.sock;
        listen       8443 ssl http2;
        server_name  localhost;

        ssl_certificate keys/server.crt;
        ssl_certificate_key keys/key.pem;
        ssl_protocols TLSv1.2;
        ssl_ciphers TLS-AES-128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256;

        # for benchmark
        http2_max_requests 999999;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        add_header Origin-Http2 $http2;

        location / {
            root   ./html;
            index  index.html index.htm;
        }

        # this allows an arbitrary prefix to be included in URLs, so
        # that tests can control caching.
        location ~ ^/unique/[^/]+(/.*)$ {
            rewrite ^/unique/[^/]+(/.*)$ $1 last;
        }

        # this serves as an origin hit counter for an arbitrary prefix, which
        # then redirects to the rest of the URL like our unique/... endpoint.
        location ~ ^/hitcounted/[^/]+(/.*)$ {
            rewrite_by_lua_block {
                -- Extract specified ID
                local _, _, id = string.find(ngx.var.request_uri, "[^/]+/([^/]+)")

                -- Incr hit counter
                local hits = ngx.shared.hit_counter
                if not hits:get(id) then
                    hits:safe_set(id, 0, nil)
                end
                local value = hits:incr(id, 1)

                -- Rewrite URI to the requested destination
                local destStartIndex = string.find(ngx.var.request_uri, id) + string.len(id)
                local dest = string.sub(ngx.var.request_uri, destStartIndex)
                ngx.req.set_uri(dest, true)
            }
        }

        # this serves the hit count from the hitcounted endpoint
        location ~ ^/read_hit_count/[^/]+(/.*)$ {
            content_by_lua_block {
                -- Find the hit count for the given ID and return it.
                local _, _, id = string.find(ngx.var.request_uri, "[^/]+/([^/]+)")
                local hits = ngx.shared.hit_counter
                ngx.print(hits:get(id) or 0)
            }
        }

        location /test {
            return 200;
        }
        location /test2 {
            return 200 "hello world";
        }
        location /test3 {
            #return 200;
            content_by_lua_block {
                ngx.print("hello world")
            }
        }

        location /test4 {
            rewrite_by_lua_block {
                ngx.exit(200)
            }
            #return 201;

        }

        location /now {
            header_filter_by_lua_block {
                ngx.header["x-epoch"] = ngx.now()
            }
            return 200 "hello world";
        }

        location /brotli {
            header_filter_by_lua_block {
                local ae = ngx.req.get_headers()["Accept-Encoding"]
                if ae and ae:find("br") then
                    ngx.header["Content-Encoding"] = "br"
                else
                    return ngx.exit(400)
                end
            }
            content_by_lua_block {
                -- brotli compressed 'hello'.
                ngx.print("\x0f\x02\x80hello\x03")
            }
        }

        location /cache_control {
            header_filter_by_lua_block {
                local h = ngx.req.get_headers()
                if h["set-cache-control"] then
                    ngx.header["Cache-Control"] = h["set-cache-control"]
                end
                if h["set-cache-tag"] then
                    ngx.header["Cache-Tag"] = h["set-cache-tag"]
                end
                if h["set-revalidated"] then
                    return ngx.exit(304)
                end
            }
            return 200 "hello world";
        }

        location /revalidate_now {
            header_filter_by_lua_block {
                ngx.header["x-epoch"] = ngx.now()
                ngx.header["Last-Modified"] = "Tue, 03 May 2022 01:04:39 GMT"
                ngx.header["Etag"] = '"abcd"'
                local h = ngx.req.get_headers()
                if h["if-modified-since"] or h["if-none-match"] then
                    -- just assume they match
                    return ngx.exit(304)
                end
            }
            return 200 "hello world";
        }

        location /revalidate_vary {
            header_filter_by_lua_block {
                ngx.header["Last-Modified"] = "Tue, 03 May 2022 01:04:39 GMT"
                ngx.header["Etag"] = '"abcd"'
                local h = ngx.req.get_headers()
                if h["set-vary"] then
                    ngx.header["Vary"] = h["set-vary"]
                end
                if h["set-no-vary"] then
                    -- expects proxy to force return no variance with this
                    ngx.header["Vary"] = "x-no-vary"
                end
                if not h["x-no-revalidate"] and (h["if-modified-since"] or h["if-none-match"]) then
                    -- just assume they match
                    return ngx.exit(304)
                end
            }
            return 200 "hello world";
        }

        location /no_if_headers {
            content_by_lua_block {
                local h = ngx.req.get_headers()
                if h["if-modified-since"] or h["if-none-match"] or h["range"] then
                    return ngx.exit(400)
                end
                ngx.say("no if headers detected")
            }
        }

        location /client_ip {
            add_header x-client-ip $remote_addr;
            return 200;
        }

        # 1. A origin load balancer that rejects reused connections.
        # This is to simulate the common problem when an upstream LB drops
        # a connection silently after being `keepalive`d for a while.
        # 2. A middlebox might drop the connection if the origin takes too long
        # to respond. We should not retry in this case.
        location /bad_lb {
            rewrite_by_lua_block {
                ngx.sleep(1)
                if tonumber(ngx.var.connection_requests) > 1 then
                    -- force drop the request and close the connection
                    ngx.exit(444)
                end
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if data then
                    ngx.say(data)
                else
                    ngx.say("dog!")
                end
            }
        }

        location /duplex/ {
            client_max_body_size 1G;
            content_by_lua_block {
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                -- without ngx.req.read_body(), the body will return without waiting for req body
            }
        }

        location /upload/ {
            client_max_body_size 1G;
            content_by_lua_block {
                ngx.req.read_body()
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
                ngx.print(string.rep("A", 64))
            }
        }

        location /tls_verify {
            keepalive_timeout 0;
            return 200;
        }

        location /noreuse {
            keepalive_timeout 0;
            return 200 "hello world";
        }

        location /set_cookie {
            add_header Set-Cookie "chocolate chip";
            return 200 "hello world";
        }

        location /chunked {
            content_by_lua_block {
                ngx.req.read_body()
                ngx.print(string.rep("A", 64))
            }
        }

        location /echo {
            content_by_lua_block {
                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if data then
                    ngx.print(data)
                end
            }
        }

        location /low_ttl {
            add_header Cache-Control "public, max-age=0";
            return 200 "low ttl";
        }

        location /connection_die {
            content_by_lua_block {
                ngx.print(string.rep("A", 5))
                ngx.flush()
                ngx.exit(444) -- 444 kills the connection right away
            }
        }

        location /no_compression {
            gzip off; # avoid accidental turn it on at server block
            content_by_lua_block {
                ngx.print(string.rep("B", 32))
            }
        }

        location /file_maker {
            gzip off; # fixed content size
            content_by_lua_block {
                local size = tonumber(ngx.var.http_x_set_size) or 1024
                ngx.print(string.rep("A", size))
            }
        }

        location /sleep {
            rewrite_by_lua_block {
                local sleep_sec = tonumber(ngx.var.http_x_set_sleep) or 1
                ngx.sleep(sleep_sec)
                if ngx.var.http_x_abort then
                    -- force drop the request and close the connection
                    ngx.exit(444)
                end
            }
            content_by_lua_block {
                if ngx.var.http_x_error_header then
                    ngx.status = 500
                    ngx.exit(0)
                    return
                end
                ngx.print("hello ")
                ngx.flush()
                local sleep_sec = tonumber(ngx.var.http_x_set_body_sleep) or 0
                ngx.sleep(sleep_sec)
                if ngx.var.http_x_abort_body then
                    ngx.flush()
                    -- force drop the request and close the connection
                    ngx.exit(444)
                    return
                end
                ngx.print("world")
            }
            header_filter_by_lua_block {
                if ngx.var.http_x_no_store then
                    ngx.header["Cache-control"] = "no-store"
                end
                if ngx.var.http_x_no_stale_revalidate then
                    ngx.header["Cache-control"] = "stale-while-revalidate=0"
                end
                if ngx.var.http_x_set_content_length then
                    ngx.header["Content-Length"] = "11" -- based on "hello world"
                end
            }
        }

        location /slow_body {
            content_by_lua_block {
                local sleep_sec = tonumber(ngx.var.http_x_set_sleep) or 1
                ngx.flush()
                ngx.sleep(sleep_sec)
                ngx.print("hello ")
                ngx.flush()
                ngx.sleep(sleep_sec)
                ngx.print("world")
                ngx.sleep(sleep_sec)
                ngx.print("!")
            }
        }

        location /content_type {
            header_filter_by_lua_block {
                ngx.header["Content-Type"] = ngx.var.http_set_content_type
            }
            return 200 "hello world";
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
